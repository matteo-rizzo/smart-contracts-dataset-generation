import json
import logging
import os
from typing import List

from rich.console import Console

from src.classes.generation.VulnerabilityScenario import VulnerabilityScenario


class VulnerabilityScenarioReader:
    """
    Reads vulnerability scenarios from JSON files in the specified directory.
    """

    def __init__(self, scenarios_dir: str):
        """
        Initializes the VulnerabilityScenarioReader.

        :param scenarios_dir: The directory containing scenario JSON files.
        :type scenarios_dir: str
        """
        self.scenarios_dir = scenarios_dir
        self.console = Console()
        self.logger = logging.getLogger("rich")

    def read_scenarios(self) -> List[VulnerabilityScenario]:
        """
        Reads scenario JSON files from the specified directory, converts them into
        VulnerabilityScenario objects, and returns them as a list.

        :return: A list of VulnerabilityScenario objects read from the JSON files.
        :rtype: List[VulnerabilityScenario]
        :raises Exception: If any error occurs during reading or parsing files.
        """
        scenarios = []
        try:
            scenario_files = [f for f in os.listdir(self.scenarios_dir) if f.endswith('.json')]
            scenario_files.sort()  # Sort the files for consistent ordering
            for filename in scenario_files:
                filepath = os.path.join(self.scenarios_dir, filename)
                with open(filepath, 'r', encoding='utf-8') as file:
                    scenario_data = json.load(file)
                    scenario = VulnerabilityScenario.from_json(scenario_data)
                    scenarios.append(scenario)
                    self.logger.info(f"[bold green]Read scenario:[/bold green] {filename}")
            return scenarios
        except Exception as e:
            self.logger.error(f"[bold red]Error reading scenarios:[/bold red] {e}")
            raise e
